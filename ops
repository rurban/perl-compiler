{"version":1,"ops":[{"type":1,"author":{"id":"dc64d6d260e2683565fe6e13d60cfbe9fec0fa09"},"timestamp":1426278130,"metadata":{"github-id":"MDU6SXNzdWU2MTIyMDg4NQ==","github-url":"https://github.com/rurban/perl-compiler/issues/191","origin":"github"},"title":"string overload (t/CORE/op/filetest.t)","message":"Original [issue 189](https://code.google.com/p/perl-compiler/issues/detail?id=189) created by toddr on 2013-11-11T20:45:03.000Z:\n\nExcerpt from op/filetest.t\n\nCODE:\n# !./perl\n\n{\n    package OverString;\n\n```\n# No fallback. -X should fall back to string overload even without                                                                                                                                  \n# it.                                                                                                                                                                                               \nuse overload q/\u0026quot;\u0026quot;/ =\u0026gt; sub { $over = 1; \u0026quot;TEST\u0026quot; };\n```\n\n}\nmy $str = bless [], \u0026quot;OverString\u0026quot;;\n\nsub ok { my ($ok, $msg) = @_; print(($ok ? 'ok ' : 'not ok' ) . \u0026quot; - $msg\\n\u0026quot;) }\nsub is { my ($want, $got, $msg) = @_; ok($want == $got, $msg) }\n\nfor my $op (split //, \u0026quot;rwxoRWXOezsfdlpSbctugkTMBAC\u0026quot;) {\n    $rv = eval \u0026quot;-$op \\$str\u0026quot;;\n    is( $rv, eval \u0026quot;-$op 'TEST'\u0026quot;,    \u0026quot;correct -$op on string overload\u0026quot; );\n}\n\nWhat is the expected output? \n$\u0026gt;perl op/filetest.t\nok  - correct -r on string overload\nok  - correct -w on string overload\nok  - correct -x on string overload\nok  - correct -o on string overload\nok  - correct -R on string overload\nok  - correct -W on string overload\nok  - correct -X on string overload\nok  - correct -O on string overload\nok  - correct -e on string overload\nok  - correct -z on string overload\nok  - correct -s on string overload\nok  - correct -f on string overload\nok  - correct -d on string overload\nok  - correct -l on string overload\nok  - correct -p on string overload\nok  - correct -S on string overload\nok  - correct -b on string overload\nok  - correct -c on string overload\nok  - correct -t on string overload\nok  - correct -u on string overload\nok  - correct -g on string overload\nok  - correct -k on string overload\nok  - correct -T on string overload\nok  - correct -M on string overload\nok  - correct -B on string overload\nok  - correct -A on string overload\nok  - correct -C on string overload\n\nWhat do you see instead?\n$\u0026gt;perlcc -r op/filetest.t\nnot ok - correct -r on string overload\nnot ok - correct -w on string overload\nnot ok - correct -x on string overload\nnot ok - correct -o on string overload\nnot ok - correct -R on string overload\nnot ok - correct -W on string overload\nnot ok - correct -X on string overload\nnot ok - correct -O on string overload\nnot ok - correct -e on string overload\nok  - correct -z on string overload\nnot ok - correct -s on string overload\nnot ok - correct -f on string overload\nok  - correct -d on string overload\nok  - correct -l on string overload\nok  - correct -p on string overload\nok  - correct -S on string overload\nok  - correct -b on string overload\nok  - correct -c on string overload\nok  - correct -t on string overload\nok  - correct -u on string overload\nok  - correct -g on string overload\nok  - correct -k on string overload\nnot ok - correct -T on string overload\nnot ok - correct -M on string overload\nok  - correct -B on string overload\nnot ok - correct -A on string overload\nnot ok - correct -C on string overload","files":null}]}