{"version":1,"ops":[{"type":1,"author":{"id":"56586ed5deca9cd92c92f9ff0458b9bd60f911f3"},"timestamp":1436369667,"metadata":{"github-id":"MDU6SXNzdWU5MzgyMDU2NQ==","github-url":"https://github.com/rurban/perl-compiler/issues/203","origin":"github"},"title":"Using define on a sub remove it from the compiled code","message":"This is the same issue described by BC issue 378, https://code.google.com/p/perl-compiler/issues/detail?id=378\n\n``` perl\npackage Boom;\n\nsub new {  \n    if ( defined \u0026IO::Handle::autoflush ) { 1 }\n}\n\npackage Bar;\nuse IO::Handle ();\nsub do {\n    return IO::Handle-\u003enew()\n}\n\npackage main;\n\nsub run {\n    eval q{require IO::Socket::INET; 1} or die $@;\n    my $sock = \"IO::Socket::INET\"-\u003ecan(\"new\")-\u003e( \"IO::Socket::INET\", \"Proto\"    =\u003e \"tcp\", \"PeerAddr\" =\u003e q{localhost} );\n    return 1\n};\n\nrun() \u0026\u0026 print qq{ok\\n}\n```\n\n\u003e perlcc -r -e 'package Boom; sub new {  if ( defined \u0026IO::Handle::autoflush ) { 1 } } package Bar; use IO::Handle (); sub do {return IO::Handle-\u003enew()} package main; sub run { eval q{require IO::Socket::INET; 1} or die $@; my $sock = \"IO::Socket::INET\"-\u003ecan(\"new\")-\u003e( \"IO::Socket::INET\", \"Proto\"    =\u003e \"tcp\", \"PeerAddr\" =\u003e q{localhost} ); return 1 }; run() \u0026\u0026 print qq{ok\\n}'\n\u003e Can't locate object method \"autoflush\" via package \"IO::Socket::INET\" at /usr/local/cpanel/3rdparty/perl/514/lib/perl5/cpanel_lib/i386-linux-64int/IO/Socket.pm line 48.\n\u003e \n\u003e perl -e 'package Boom; sub new {  if ( defined \u0026IO::Handle::autoflush ) { 1 } } package Bar; use IO::Handle (); sub do {return IO::Handle-\u003enew()} package main; sub run { eval q{require IO::Socket::INET; 1} or die $@; my $sock = \"IO::Socket::INET\"-\u003ecan(\"new\")-\u003e( \"IO::Socket::INET\", \"Proto\"    =\u003e \"tcp\", \"PeerAddr\" =\u003e q{localhost} ); return 1 }; run() \u0026\u0026 print qq{ok\\n}'\n\u003e ok\n\nBoth functions should return ok\nnote that using can allow us to avoid that issue\n\n\u003e perlcc -r -e 'package Boom; sub new {  if ( \"IO::Handle\"-\u003ecan(\"autoflush\") ) { 1 } } package Bar; use IO::Handle (); sub do {return IO::Handle-\u003enew()} package main; sub run { eval q{require IO::Socket::INET; 1} or die $@; my $sock = \"IO::Socket::INET\"-\u003ecan(\"new\")-\u003e( \"IO::Socket::INET\", \"Proto\"    =\u003e \"tcp\", \"PeerAddr\" =\u003e q{localhost} ); return 1 }; run() \u0026\u0026 print qq{ok\\n}'\n\u003e ok","files":null}]}