{"version":1,"ops":[{"type":1,"author":{"id":"dc64d6d260e2683565fe6e13d60cfbe9fec0fa09"},"timestamp":1426203015,"metadata":{"github-id":"MDU6SXNzdWU2MDkzNTIxNQ==","github-url":"https://github.com/rurban/perl-compiler/issues/76","origin":"github"},"title":"B::CC Unexpected \"Use of uninitialized value\" in conditional","message":"Original [issue 74](https://code.google.com/p/perl-compiler/issues/detail?id=74) created by rurban on 2011-07-06T18:56:13.000Z:\n\nThis test program prints unexpected \u0026quot;Use of uninitialized value\u0026quot; if compiled with B::CC.\n\ntest24.pl\n\n``` perl\nuse warnings;\nmy $u; \nmy $v;\nprint \"t1\\n\";\nif ($u) {\n    $v = 1;\n}\nelse {\n    print \"t2\\n\";\n}\nprint \"t3\\n\";\n```\n\nExpected output:\n$ perl test24.pl\nt1\nt2\nt3\n\nWith B:CC:\n$ perlcc -O -o test24 test24.pl\n$ ./test24\nt1\nt2\nUse of uninitialized value in next statement at test24.c line 11.\nt3\n\nUsed versions:\n- perl v5.12.3\n- B::C r1118\n\nB::CC processes basic blocks in this order:\n(1) print t1\n(2) if clause\n(3) print t3\n(4) else clause with print t2\nAfter processing (2) the if clause, it knows that $v has an integer value and\nit stores a copy of this value inside a C variable.\nWhile processing (3), the compiler still assumes the value of $v being stored in the C variable. It would generate optimized code to access $v. But this doesn't happen because $v isn't used in (3).\nThe problem occurs while processing (4), the else clause.\nThis basic block doesn't use $v, but control flows to basic block (3).\nThe compiler must meet the previous assumption during compilation of (3) and\ntherefore it loads the integer value of $v into the known C variable.\nThis triggers the warning message, because $v has an undefined value.","files":null}]}